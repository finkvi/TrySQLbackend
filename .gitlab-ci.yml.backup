image: node

stages:
    - deploy
    
deploy_production:
    stage: deploy
    tags: 
        - trysql.online
        - backend
    script:
      ##
      ## Install ssh-agent if not already installed, it is required by Docker.
      ## (change apt-get to yum if you use an RPM-based image)
      ##
      - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )'
    
      ##
      ## Run ssh-agent (inside the build environment)
      ##
      - eval $(ssh-agent -s)
    
      ##
      ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
      ## We're using tr to fix line endings which makes ed25519 keys work
      ## without extra base64 encoding.
      ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
      ##
      - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    
      ##
      ## Create the SSH directory and give it the right permissions
      ##
      - mkdir -p ~/.ssh
      - chmod 700 ~/.ssh
    
      ##
      ## Use ssh-keyscan to scan the keys of your private server. Replace gitlab.com
      ## with your own domain name. You can copy and repeat that command if you have
      ## more than one server to connect to.
      ##
      - ssh-keyscan trysql.online >> ~/.ssh/known_hosts
      - chmod 644 ~/.ssh/known_hosts
    
      ##
      ## Alternatively, assuming you created the SSH_SERVER_HOSTKEYS variable
      ## previously, uncomment the following two lines instead.
      ##
      #- echo "$SSH_SERVER_HOSTKEYS" > ~/.ssh/known_hosts'
      #- chmod 644 ~/.ssh/known_hosts
    
      ##
      ## You can optionally disable host key checking. Be aware that by adding that
      ## you are suspectible to man-in-the-middle attacks.
      ## WARNING: Use this only with the Docker executor, if you use it with shell
      ## you will overwrite your user's SSH config.
      ##
      - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    
      ##
      ## Optionally, if you will be using any Git commands, set the user name and
      ## email.
      ##
      #- git config --global user.email "darth@empire.com"
      #- git config --global user.name "Darth Vader"

      #Create .env file and send to production
      - mkdir $CI_COMMIT_SHORT_SHA
      - echo $TEST1 >> .env
      - echo $TEST2 >> .env
      - echo $CI_COMMIT_TAG >> .env

      # copy build
      # try to connect and copy
      - scp -P22 -r $CI_COMMIT_SHORT_SHA backender@trysql.online:/srv/strapi/
      #- ssh backender@trysql.online 'bash -s' < /srv/strapi/$CI_COMMIT_SHORT_SHA/sh_utils/deploy.sh
      
    environment:     
        name: production     
        # Exposes a button that when clicked take you to the defined URL:
        url: https://trysql.online   
